{"version":3,"sources":["dom.js"],"names":["window","dom","create","string","container","document","createElement","innerHTML","trim","content","firstChild","after","node","node2","parentNode","insertBefore","nextSibling","before","append","parent","appendChild","wrap","remove","removeChild","empty","array","x","push","attr","name","value","arguments","length","setAttribute","getAttribute","text","innerText","textContent","html","style","Object","object","key","class","add","className","classList","has","contains","on","eventName","fn","addEventListener","off","removeEventListener","find","selector","scope","querySelectorAll","children","siblings","Array","from","filter","n","next","nodeType","previous","previousSibling","each","nodeList","i","call","index","list"],"mappings":"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","file":"dom.1d0b6d56.js","sourceRoot":"../src","sourcesContent":["window.dom = {\n  //增的部分\n\n  //用于创建节点\n  create(string) {\n    const container = document.createElement('template')   //template标签用来容纳任意元素\n    container.innerHTML = string.trim()                    //trim用来将字符串两边的空白字符去掉\n    return container.content.firstChild\n  },\n  //在一个节点后边插入一个节点(用于新增弟弟)\n  after(node, node2) {\n    node.parentNode.insertBefore(node2, node.nextSibling)\n  },\n  //在一个节点前边插入一个节点(用于新增哥哥)\n  before(node, node2) {\n    node.parentNode.insertBefore(node2, node)\n  },\n  //将一个节点添加到另外一个节点中(新增一个儿子)\n  append(parent, node) {\n    return parent.appendChild(node)\n  },\n  //用一个节点包裹另一个节点(新增一个爸爸)\n  wrap(node, parent) {\n    dom.before(node, parent)        //首先在该节点前新增一个爸爸\n    dom.append(parent, node)        //之后将该节点放到爸爸中\n  },\n\n  //删的部分\n\n  //删除一个节点\n  remove(node) {\n    node.parentNode.removeChild(node)\n    return node\n  },\n  //清除一个节点的后代\n  empty(node) {\n    const array = []\n    let x = node.firstChild\n    while (x) {\n      array.push(dom.remove(x))   //写为 array.push(dom.remove(node.firstChild))更好理解\n      x = node.firstChild\n    }\n    return array\n  },\n\n  //改的部分\n\n  //读写元素的属性\n  attr(node, name, value) {      //   重载\n    if (arguments.length === 3) {\n      node.setAttribute(name, value)\n    } else if (arguments.length === 2) {\n      return node.getAttribute(name)\n    }\n  },\n  //读写元素的文本内容\n  text(node, string) {    //适配\n    if (arguments.length === 2) {\n      if ('innerText' in node) {\n        node.innerText = string\n      } else {\n        node.textContent = string\n      }\n    } else if (arguments.length === 1) {\n      if ('innerText' in node) {\n        return node.innerText\n      } else {\n        return node.textContent\n      }\n    }\n  },\n  //读写HTML内容\n  html(node, string) {\n    if (arguments.length === 2) {\n      node.innerHTML = string\n    } else if (arguments.length === 1) {\n      return node.innerHTML\n    }\n  },\n  //修改元素的style\n  style(node, name, value) {\n    if (arguments.length === 3) {\n      //类似于输入dom.style(node,'color','red')\n      node.style[name] = value\n    } else if (arguments.length === 2) {\n      if (typeof (name) === 'string') {\n        //类似于输入dom.style(node,'color')\n        return node.style[name]\n      } else if (name instanceof Object) {  //instanceof用来判断name是否为对象。\n        //类似于输入dom.style(test1, { border: '1px solid red', color: 'red' })\n        let object = name\n        for (let key in object) {\n          node.style[key] = object[key]\n        }\n      }\n    }\n  },\n  //修改和查询元素class\n  class: {\n    add(node, className) {\n      node.classList.add(className)\n    },\n    remove(node, className) {\n      node.classList.remove(className)\n    },\n    has(node, className) {\n      return node.classList.contains(className)\n    }\n  },\n  //添加事件\n  on(node, eventName, fn) {\n    node.addEventListener(eventName, fn)\n  },\n  //删除事件\n  off(node, eventName, fn) {\n    node.removeEventListener(eventName, fn)\n  },\n\n  //查的部分\n\n  //获取标签\n  find(selector, scope) {\n    return (scope || document).querySelectorAll(selector)\n  },\n  //获取元素的父元素\n  parent(node) {\n    return node.parentNode\n  },\n  //获取元素的子元素\n  children(node) {\n    return node.children\n  },\n  //获取元素的兄弟姐妹\n  siblings(node) {\n    return Array.from(node.parentNode.children).filter(n => n !== node)\n  },\n  //获取下一个节点\n  next(node) {\n    let x = node.nextSibling\n    while (x && x.nodeType === 3) {\n      x = x.nextSibling\n    }\n    return x\n  },\n  //获取上一个节点\n  previous(node) {\n    let x = node.previousSibling\n    while (x && x.nodeType === 3) {\n      x = x.previousSibling\n    }\n    return x\n  },\n  //遍历\n  each(nodeList, fn) {\n    for (let i = 0; i < nodeList.length; i++) {\n      fn.call(null, nodeList[i])\n    }\n  },\n  //获取元素的排名\n  index(node) {\n    const list = dom.children(node.parentNode)\n    let i = 0\n    for (i; i < list.length; i++) {\n      if (list[i] === node) {\n        break\n      }\n    }\n    return i\n  }\n}"]}